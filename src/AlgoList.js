import * as algos from './algo';

// After adding the export in algos/index.js, add new algorithms in the following format:
// AlgorithmName: ['Menu Display Name', algos.ClassName, hasPseudoCode, 'Verbose Display Name (optional)']
export const algoMap = {
	ArrayList: ['ArrayList', algos.ArrayList, true],
	LinkedList: ['Singly LinkedList', algos.LinkedList],
	DoublyLinkedList: ['Doubly LinkedList', algos.DoublyLinkedList, true],
	CircularlyLinkedList: ['Circularly LinkedList', algos.CircularlyLinkedList, true],
	StackArray: ['Stack (Array)', algos.StackArray, true],
	StackLL: ['Stack (LinkedList)', algos.StackLL, true],
	QueueArray: ['Queue (Array)', algos.QueueArray, true],
	QueueLL: ['Queue (LinkedList)', algos.QueueLL, true],
	DequeArray: ['Deque (Array)', algos.DequeArray, true],
	DequeLL: ['Deque (LinkedList)', algos.DequeLL],
	BST: ['Binary Search Tree', algos.BST, true],
	BubbleSort: ['Bubble Sort', algos.BubbleSort, true],
	InsertionSort: ['Insertion Sort', algos.InsertionSort, true],
	SelectionSort: ['Selection Sort', algos.SelectionSort, true],
	QuickSort: ['QuickSort', algos.QuickSort, true],
	QuickSelect: ['Quick / kᵗʰ Select', algos.QuickSelect, true],
	MergeSort: ['MergeSort', algos.MergeSort, true],
	HeapSort: ['HeapSort', algos.HeapSort, true],
	BFS: ['Breadth-First Search', algos.BFS, true],
	DFS: ['Depth-First Search', algos.DFS, true],
	Dijkstra: ["Dijkstra's", algos.Dijkstras, true],
};

export const algoList = [
	// 'Lists',
	'ArrayList',
	'LinkedList',
	'DoublyLinkedList',
	// 'CircularlyLinkedList',
	// 'Stacks, Queues and Deques',
	// 'StackArray',
	// 'StackLL',
	// 'QueueArray',
	// 'QueueLL',
	// 'DequeArray',
	// 'DequeLL',
	// 'Trees and SkipList',
	// 'BST',
	// 'Sorting',
	// 'BubbleSort',
	// 'InsertionSort',
	// 'SelectionSort',
	// 'QuickSort',
	// 'QuickSelect',
	// 'MergeSort',
	// 'Graph Algorithms',
	// 'BFS',
	// 'DFS',
	// 'Dijkstra',
];
